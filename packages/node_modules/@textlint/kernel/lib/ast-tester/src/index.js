// LICENSE : MIT
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = __importStar(require("assert"));
var unist_test_1 = require("./unist-test");
function isTxtAST(node) {
    try {
        test(node);
    }
    catch (error) {
        return false;
    }
    return true;
}
exports.isTxtAST = isTxtAST;
function test(node) {
    // test unist that is weak.
    unist_test_1.test(node);
    assert.strictEqual(typeof node, "object");
    assert.strictEqual(typeof node.type, "string");
    assert.ok(node.type.length >= 1);
    assert.doesNotThrow(function () {
        JSON.parse(JSON.stringify(node));
    });
    // children
    if (node.children !== null && node.children !== undefined) {
        assert.ok(Array.isArray(node.children));
        node.children.forEach(test);
    }
    // value
    if (node.value !== null && node.value !== undefined) {
        assert.strictEqual(typeof node.value, "string");
    }
    // raw
    assert.ok(node.raw !== null && node.raw !== undefined);
    assert.strictEqual(typeof node.raw, "string");
    // loc
    var loc = node.loc;
    assert.ok(loc !== null && loc !== undefined);
    assert.strictEqual(typeof loc, "object");
    var start = loc.start;
    var end = loc.end;
    if (start !== null && start !== undefined) {
        assert.strictEqual(typeof start, "object");
        if (start.line !== null && start.line !== undefined) {
            assert.strictEqual(typeof start.line, "number");
            assert.ok(start.line >= 0); // allow `0` for `null`.
        }
        if (start.column !== null && start.column !== undefined) {
            assert.strictEqual(typeof start.column, "number");
            assert.ok(start.column >= 0); // allow `0` for `null`.
        }
        if (start.offset !== null && start.offset !== undefined) {
            assert.strictEqual(typeof start.offset, "number");
            assert.ok(start.offset >= 0);
        }
    }
    if (end !== null && end !== undefined) {
        assert.strictEqual(typeof end, "object");
        if (end.line !== null && end.line !== undefined) {
            assert.strictEqual(typeof end.line, "number");
            assert.ok(end.line >= 0); // allow `0` for `null`.
        }
        if (end.column !== null && end.column !== undefined) {
            assert.strictEqual(typeof end.column, "number");
            assert.ok(end.column >= 0); // allow `0` for `null`.
        }
        if (end.offset !== null && end.offset !== undefined) {
            assert.strictEqual(typeof end.offset, "number");
            assert.ok(end.offset >= 0);
        }
    }
    // range
    var range = node.range;
    assert.ok(range !== null && range !== undefined);
    assert.ok(Array.isArray(range));
    range.forEach(function (index) {
        assert.strictEqual(typeof index, "number");
        assert.ok(index >= 0);
    });
    assert.ok(range[0] <= range[1]);
}
exports.test = test;
//# sourceMappingURL=index.js.map